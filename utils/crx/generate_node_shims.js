#!/usr/bin/env node
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// @ts-check

const fs = require('fs');
const path = require('path');

const nodeModules = [
  'child_process',
  'cluster',
  'dgram',
  'dns',
  'domain',
  'http',
  'https',
  'module',
  'net',
  'querystring',
  'readline',
  'timers',
  'tls',
  'tty',
  'v8',
  'vm',
  'zlib',
];

const ROOT = path.join(__dirname, '..', '..');

const header =
`/**
  * Copyright (c) Microsoft Corporation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */

// This file is generated by ${path.basename(__filename).split(path.sep).join(path.posix.sep)}, do not edit manually.`;

const outdir = path.join(ROOT, 'packages', 'playwright-crx', 'src', 'shims', 'generated');

fs.rmSync(outdir, { recursive: true, force: true });
fs.mkdirSync(outdir);

for (const nodeModule of nodeModules) {
  const props = Object.keys(require(nodeModule));
  const fileName = path.join(outdir, `${nodeModule}.ts`);

  const importError = `import { errorProxy } from '../error';`;

  const exportProps = props
      .map(prop => `export const ${prop} = /* @__PURE__ */ errorProxy('__PW_CRX_error_${nodeModule}.${prop}__');`)
      .join('\n');

  const exportDefault = `export default /* @__PURE__ */ errorProxy('__PW_CRX_error_${nodeModule}__');`;

  fs.writeFileSync(fileName, [header, importError, exportProps, exportDefault].filter(Boolean).join('\n\n'));
  console.log(`shims for ${nodeModule} generated`);
}
