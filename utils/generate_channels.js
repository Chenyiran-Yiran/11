#!/usr/bin/env node
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const fs = require('fs');
const os = require('os');
const path = require('path');
const yaml = require('yaml');

const channels = new Set();

function raise(item) {
  throw new Error('Invalid item: ' + JSON.stringify(item, null, 2));
}

function titleCase(name) {
  return name[0].toUpperCase() + name.substring(1);
}

function inlineType(type, indent, addTypesNamespace, wrapEnums = false) {
  if (typeof type === 'string') {
    const optional = type.endsWith('?');
    if (optional)
      type = type.substring(0, type.length - 1);
    if (type === 'binary')
      return { ts: addTypesNamespace ? 'types.Binary' : 'Binary', scheme: 'tBinary', optional };
    if (type === 'json')
      return { ts: 'any', scheme: 'tAny', optional };
    if (['string', 'boolean', 'number', 'undefined'].includes(type))
      return { ts: type, scheme: `t${titleCase(type)}`, optional };
    if (channels.has(type))
      return { ts: `${type}Channel`, scheme: `tChannel('${type}')` , optional };
    if (type === 'Channel')
      return { ts: addTypesNamespace ? `Channel` : 'any', scheme: `tChannel('*')`, optional };
    return { ts: addTypesNamespace ? `types.${type}` : type, scheme: `tType('${type}')`, optional };
  }
  if (type.type.startsWith('array')) {
    const optional = type.type.endsWith('?');
    const inner = inlineType(type.items, indent, addTypesNamespace,  true);
    return { ts: `${inner.ts}[]`, scheme: `tArray(${inner.scheme})`, optional };
  }
  if (type.type.startsWith('enum')) {
    const optional = type.type.endsWith('?');
    const ts = type.literals.map(literal => `'${literal}'`).join(' | ');
    return {
      ts: wrapEnums ? `(${ts})` : ts,
      scheme: `tEnum([${type.literals.map(literal => `'${literal}'`).join(', ')}])`,
      optional
    };
  }
  if (type.type.startsWith('object')) {
    const optional = type.type.endsWith('?');
    const inner = properties(type.properties, indent + '  ', false, addTypesNamespace);
    return {
      ts: `{\n${inner.ts}\n${indent}}`,
      scheme: `tObject({\n${inner.scheme}\n${indent}})`,
      optional
    };
  }
  raise(type);
}

function properties(props, indent, onlyOptional, addTypesNamespace) {
  const ts = [];
  const scheme = [];
  for (const [name, value] of Object.entries(props)) {
    const inner = inlineType(value, indent, addTypesNamespace);
    if (onlyOptional && !inner.optional)
      continue;
    ts.push(`${indent}${name}${inner.optional ? '?' : ''}: ${inner.ts},`);
    const wrapped = inner.optional ? `tOptional(${inner.scheme})` : inner.scheme;
    scheme.push(`${indent}${name}: ${wrapped},`);
  }
  return { ts: ts.join('\n'), scheme: scheme.join('\n') };
}

function objectType(props, indent, onlyOptional = false, addTypesNamespace = true) {
  if (!Object.entries(props).length)
    return { ts: `{}`, scheme: `tObject({})` };
  const inner = properties(props, indent + '  ', onlyOptional, addTypesNamespace);
  return { ts: `{\n${inner.ts}\n${indent}}`, scheme: `tObject({\n${inner.scheme}\n${indent}})` };
}

const prefix =
`/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is generated by ${path.basename(__filename).split(path.sep).join(path.posix.sep)}, do not edit manually.
`;

const client_channels_ts = [ prefix,
`import { EventEmitter } from 'events';
import * as types from '../protocol/types';
export * from '../protocol/types';

export interface Channel extends EventEmitter {
}
`];

const server_channels_ts = [ prefix,
`import { EventEmitter } from 'events';
import * as types from '../protocol/types';
import { Progress } from '../server/progress';
export * from '../protocol/types';

export interface Channel extends EventEmitter {
}
`];

const types_ts = [ prefix,
`export type Binary = string;
`];

const validator_ts = [ prefix,
`import { Validator, ValidationError, tOptional, tObject, tBoolean, tNumber, tString, tAny, tEnum, tArray, tBinary } from './validatorPrimitives';
export { Validator, ValidationError } from './validatorPrimitives';

type Scheme = { [key: string]: Validator };

export function createScheme(tChannel: (name: string) => Validator): Scheme {
  const scheme: Scheme = {};

  const tType = (name: string): Validator => {
    return (arg: any, path: string) => {
      const v = scheme[name];
      if (!v)
        throw new ValidationError(path + ': unknown type "' + name + '"');
      return v(arg, path);
    };
  };
`];

const yml = fs.readFileSync(path.join(__dirname, '..', 'src', 'protocol', 'protocol.yml'), 'utf-8');
const protocol = yaml.parse(yml);

function addScheme(name, s) {
  const lines = `scheme.${name} = ${s};`.split('\n');
  validator_ts.push(...lines.map(line => '  ' + line));
}

const inherits = new Map();
for (const [name, value] of Object.entries(protocol)) {
  if (value.type === 'interface') {
    channels.add(name);
    if (value.extends)
      inherits.set(name, value.extends);
  }
}

for (const [name, item] of Object.entries(protocol)) {
  if (item.type === 'interface') {
    const channelName = name;
    client_channels_ts.push(`// ----------- ${channelName} -----------`);
    server_channels_ts.push(`// ----------- ${channelName} -----------`);
    const init = objectType(item.initializer || {}, '');
    const initializerName = channelName + 'Initializer';
    client_channels_ts.push(`export type ${initializerName} = ${init.ts};`);
    server_channels_ts.push(`export type ${initializerName} = ${init.ts};`);

    client_channels_ts.push(`export interface ${channelName}Channel extends ${(item.extends || '') + 'Channel'} {`);
    server_channels_ts.push(`export interface ${channelName}Channel extends ${(item.extends || '') + 'Channel'} {`);
    const ts_types = new Map();

    for (let [eventName, event] of Object.entries(item.events || {})) {
      if (event === null)
        event = {};
      const parameters = objectType(event.parameters || {}, '');
      const paramsName = `${channelName}${titleCase(eventName)}Event`;
      ts_types.set(paramsName, parameters.ts);
      client_channels_ts.push(`  on(event: '${eventName}', callback: (params: ${paramsName}) => void): this;`);
    }

    for (let [methodName, method] of Object.entries(item.commands || {})) {
      if (method === null)
        method = {};
      const parameters = objectType(method.parameters || {}, '');
      const paramsName = `${channelName}${titleCase(methodName)}Params`;
      const optionsName = `${channelName}${titleCase(methodName)}Options`;
      ts_types.set(paramsName, parameters.ts);
      ts_types.set(optionsName, objectType(method.parameters || {}, '', true).ts);
      addScheme(paramsName, method.parameters ? parameters.scheme : `tOptional(tObject({}))`);
      for (const key of inherits.keys()) {
        if (inherits.get(key) === channelName)
          addScheme(`${key}${titleCase(methodName)}Params`, `tType('${paramsName}')`);
      }

      const resultName = `${channelName}${titleCase(methodName)}Result`;
      const returns = objectType(method.returns || {}, '');
      ts_types.set(resultName, method.returns ? returns.ts : 'void');

      client_channels_ts.push(`  ${methodName}(params${method.parameters ? '' : '?'}: ${paramsName}, timeout?: number): Promise<${resultName}>;`);
      server_channels_ts.push(`  ${methodName}(progress: Progress, params${method.parameters ? '' : '?'}: ${paramsName}): Promise<${resultName}>;`);
    }

    client_channels_ts.push(`}`);
    server_channels_ts.push(`}`);
    for (const [typeName, typeValue] of ts_types) {
      client_channels_ts.push(`export type ${typeName} = ${typeValue};`);
      server_channels_ts.push(`export type ${typeName} = ${typeValue};`);
    }
    client_channels_ts.push(``);
    server_channels_ts.push(``);
  } else if (item.type === 'object') {
    const inner = objectType(item.properties, '', false, false);
    types_ts.push(`export type ${name} = ${inner.ts};`);
    addScheme(name, inner.scheme);
    types_ts.push(``);
  }
}

validator_ts.push(`
  return scheme;
}
`);

let hasChanges = false;

function writeFile(filePath, content) {
  if (os.platform() === 'win32')
    content = content.replace(/\r\n/g, '\n').replace(/\n/g, '\r\n');
  try {
    const existing = fs.readFileSync(filePath, 'utf8');
    if (existing === content)
      return;
  } catch (e) {
  }
  hasChanges = true;
  const root = path.join(__dirname, '..');
  console.log(`Writing //${path.relative(root, filePath)}`);
  fs.writeFileSync(filePath, content, 'utf8');
}

writeFile(path.join(__dirname, '..', 'src', 'protocol', 'types.ts'), types_ts.join('\n'));
writeFile(path.join(__dirname, '..', 'src', 'client', 'channels.ts'), client_channels_ts.join('\n'));
writeFile(path.join(__dirname, '..', 'src', 'dispatchers', 'channels.ts'), server_channels_ts.join('\n'));
writeFile(path.join(__dirname, '..', 'src', 'protocol', 'validator.ts'), validator_ts.join('\n'));
process.exit(hasChanges ? 1 : 0);
